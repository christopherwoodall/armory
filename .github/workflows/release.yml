---
# yamllint disable rule:comments-indentation
# yamllint disable rule:indentation

name: üéÅ Armory Release Workflow

on:
  repository_dispatch:
    types: build-and-release

  workflow_dispatch:
    inputs:
      dry_run:
        type: boolean
        description: Execute a dry-run(no uploads) of the workflow
        required: true
        default: true
    #   release-version:
    #     description: 'Release Version'
    #     required: false
    #     default: '0.0.0'

env:
  RELEASE_DRY_RUN: "${{ github.event_name != 'repository_dispatch' && github.event.inputs.dry_run }}"

jobs:
  release-wheel:
    name: üõû Build release wheel
    runs-on: ubuntu-latest
    steps:
      - name: üêç Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: üêÑ Got git?
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üì© Checkout the Source
        run: |
          git fetch --prune --unshallow || true
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          # Verify .git folder
          if [ ! -d "./.git" ]; then
            echo "Expected ./.git folder to exist"
            exit 1
          fi

      - name: üî® Build wheel
        run: |
          pip install pip==22.2.2
          # Ensure `hatch` is installed
          pip install hatch
          hatch build --clean --target wheel

      # TODO: Add pre-release steps; e.g. publish to TestPyPI
      - name: üê¶ Release wheel
        if: ${{ env.RELEASE_DRY_RUN == 'false' }}
        uses: pypa/gh-action-pypi-publish@master
        with:
          # user: __token__
          password: ${{ secrets.pypi_token }}
          packages_dir: dist
          verbose: true


  release-docker:
    name: Build and release tf2 docker image
    needs: [release-wheel]
    runs-on: ubuntu-latest
    steps:
      - name: üêç Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: üêÑ Got git?
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üì© Checkout the Source
        run: |
          git fetch --prune --unshallow || true
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          # Verify .git folder
          if [ ! -d "./.git" ]; then
            echo "Expected ./.git folder to exist"
            exit 1
          fi

      - name: üåé Setup Build Environment
        run: |
          pip install pip==22.2.2
          pip install .

          armory configure --use-defaults

          ARMORY_VERSION=`python -m armory --version 2> /dev/null | sed -r 's/\+/\./g'`
          echo "ARMORY_VERSION=${ARMORY_VERSION}" >> $GITHUB_ENV

      - name: ‚òÅÔ∏è Login to DockerHub
        if: ${{ env.RELEASE_DRY_RUN == 'false' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        # run: |
        #   docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      # TODO: Build Base Image
      - name: üî® Build Release Images
        run: |
          echo "Building Armory ${{ env.ARMORY_VERSION }} Images"
          python docker/build.py --framework all

      - name: üì¶ Push Release Images
        if: ${{ env.RELEASE_DRY_RUN == 'false' }}
        run: |
          ARMORY_VERSION="${{ env.ARMORY_VERSION }}"
          ARMORY_IMAGES=(pytorch pytorch-deepspeech tf2)

          echo "Preparing Armory $ARMORY_VERSION Images"
          for image in "${ARMORY_IMAGES[@]}"; do
            echo "Pushing ${image}:${ARMORY_VERSION}"
            docker push twosixarmory/${image}:${ARMORY_VERSION}
            echo "Tagging ${image}:${ARMORY_VERSION} as ${image}:latest"
            docker tag twosixarmory/${image}:${ARMORY_VERSION} twosixarmory/${image}:latest
            echo "Pushing ${image}:latest"
            docker push twosixarmory/${image}:latest
          done

# yamllint enable rule:indentation
# yamllint enable rule:comments-indentation

# Workflow Test:
# act --detect-event -j release-wheel
# act workflow_dispatch -j release-docker --eventpath .github/workflows/tests/release-dry-run.json
