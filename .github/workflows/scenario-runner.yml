---
# yamllint disable

name: 🚂 Scenario Runner

on:
  workflow_dispatch:
    inputs:
      experiments_dir:
        type: choice
        description: 'Tactic Directory'
        required: false
        default: eval6
        options:
        - eval5
        - eval1-4

      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

  # NOOP used to register a workflow_dispatch event.
  # Developers should add this to their branch's workflow
  # in order to register an event.
  pull_request:
    types:
      - opened
      - synchronize
      - ready_for_review
    paths:
      - '.github/'
    branches:
      - develop
      - master


env:
  ACTION_REGISTER_EVENT: ""
  EXPERIMENTS_DIR: "${{ github.event.inputs.experiments_dir }}"
  DEBUG_ENABLED: "${{ github.event.inputs.debug_enabled }}"


jobs:
  # TODO: Document this a little better.
  # Adding the text '[register action]' to a commit message will
  # execute this job. This job is used to register a workflow_dispatch
  # event for a branch.
  # Including the text "[skip ci]" in you commit message
  # will prevent the workflow from running.
  #
  #   Commit Message  |                Action
  # ------------------|------------------------------------
  # [register action] | Register a workflow_dispatch event
  # [skip ci]         | Skip the workflow

  workflow_setup:
    # uses: ./.github/actions/workflow_setup/action.yml
    name: 📝 Register Action
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    # if: ${{ github.event_name == 'pull_request' && contains(github.event.comment.body, '!workflow register') }}
    # outputs:
    #   register_action: ${{ steps.register_action.outputs.register_event }}
    steps:
      # - name: 🐄 Got git?
      #   uses: actions/checkout@v3

      - name: 📝 Register Action
        id: register_action
        run: |
          echo "::set-output name=register_event::$(echo ${{ github.event.comment.body }} | grep -q '!workflow register' && echo true || echo false)"
      # - name: 📝 Register Action
      #
      #   run: |
      #     echo "::set-output name=register_event::$(echo ${{ github.event.comment.body }} | grep -q '!workflow register' && echo true || echo false)"

  matrix_generator:
    name: Matrix Generator
    runs-on: ubuntu-latest
    needs:
      - workflow_setup
    if: ${{ needs.workflow_setup.outputs.register_event != 'true' }}
    steps:
      - name: Test
        run: |
          echo "TEST"
          pwd
          ls -lisa

  # matrix_generator:
  #   name: Matrix Generator
  #   runs-on: ubuntu-latest
  #   needs: [workflow_setup]
  #   if: ${{ needs.workflow_setup.outputs.register_event != 'true' }}
  #   outputs:
  #     matrix: ${{ steps.generate-matrix.outputs.matrix }}
  #   steps:
  #     - name: 🐄 Got git?
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: 👩‍💻 Generating Matrix
  #       id: generate-matrix
  #       run: |
  #         echo "::set-output name=matrix::$(find ./scenario_configs/${{ github.event.inputs.experiments_dir }} -type f -name "*.json" | jq -cnR '[inputs | select(length>0)]')"


  # matrix_job:
  #   runs-on: ubuntu-latest
  #   needs: matrix_generator
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       scenario_path: ${{ fromJson(needs.matrix_generator.outputs.matrix) }}
  #   steps:
  #     - name: 🐄 Got git?
  #       uses: actions/checkout@v3

  #     - name: 🐍 Setup Environment
  #       uses: ./.github/actions/evaluations_environment_setup

  #     - name: ⚒️ Install Prerequisites
  #       run: |
  #         source .venv/bin/activate

  #     - name: 🚀 Run Scenario Evaluation
  #       timeout-minutes: 30
  #       env:
  #         ARMORY_INSTALL: "/tmp"
  #         HOME: "/tmp"
  #       run: |
  #         mkdir -p "/tmp/logs"

  #         mkdir -p "${HOME}/armory/outputs/"
  #         mkdir -p "${HOME}/.armory/"

  #         armory configure --use-defaults

  #         pytest \
  #           -c pyproject.toml \
  #           --verbose \
  #           -s ./tests/end_to_end/test_scenario_runner.py \
  #           --scenario-path ${{ matrix.scenario_path }} \
  #           --github-ci | tee "scenario_evaluation.log"


  #     - name: 📁 Archiving Artifacts
  #       uses: actions/upload-artifact@v3
  #       # if: ${{ !failure() }}
  #       continue-on-error: true
  #       with:
  #         name: evaluation-artifacts
  #         retention-days: 1
  #         path: |
  #           /tmp/logs/
  #           /tmp/results/
  #           /tmp/armory/outputs/
  #           /tmp/.armory/outputs/
