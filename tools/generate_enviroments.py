#! /usr/bin/env python3

import yaml

from pathlib import Path
from jinja2 import Template, Environment, FileSystemLoader


requirements = Path("enviroments.yml")
requirements = yaml.safe_load(requirements.read_text())

AUTO_GENERATED_HEADER = "This file was automatically generated. Do not edit this file directly."


# def generate_requirements_dict():
#   requirements_txt = {"AUTO_GENERATED_HEADER": AUTO_GENERATED_HEADER}

#   for package in requirements['packages']:
#     name    = list(package.keys())[0]
#     version = f"=={package[name]}" if package[name] else ''
#     requirements_txt[name] = f"{name}{version}"

#   return requirements_txt


def generate_conda_enviroment(include_channel=True, pin_version=True):
  enviroment_yaml = {
    'channels': [],
    'pip': []
  }

  for package, settings in requirements['packages'].items():
    name    = package
    package = package.replace('-', '_')

    if settings:
      channel   = settings.get('channel', False)
      version   = settings.get('version', False)
      installer = settings.get('installer', False)

      if version and pin_version:
        name = f"{name}=={version}"

      if channel and include_channel:
        if channel == 'pip':
          enviroment_yaml['pip'].append(name)
        else:
          enviroment_yaml['channels'].append(channel)
          name = f"{channel}:{name}"
    enviroment_yaml[package] = name

  return enviroment_yaml


# requirements_txt = generate_requirements_dict()
conda_env = generate_conda_enviroment()


for enviroment, settings in requirements["enviroments"].items():
  if settings["installer"] == "conda":
    template = Template(Path(f"./templates/{settings['template']}").read_text())
    Path(settings["output"]).write_text(template.render(conda_env))

  # if settings["installer"] == "pip":
  #   enviroment_template = Path("minimal-requirements.template").read_text()
  #   template = Template(enviroment_template)
  #   print(template.render(requirements_txt))
